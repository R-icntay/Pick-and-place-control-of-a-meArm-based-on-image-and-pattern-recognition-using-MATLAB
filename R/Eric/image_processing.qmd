---
title: "Image Processing (ish) in R"
toc: true
toc-location: left
format: 
  html:
    number-sections: true
    html-math-method: katex
    code-tools: true
    code-fold: false
    code-link: true
editor: visual
execute: 
  warning: false
  message: false
---

### Creating Checkerboard

```{r}
checkers <- function(col1, col2)
{
  plot(0, 0, xlim = c(0, 8), ylim = c(0, 8), col = "white", axes = FALSE)
  x <- sapply(0:63, function(i) {
        polygon(c(0:1, 1:0, 0) + i %% 8 , c(0, 0:1, 1:0) + i %/% 8,
        col = c(col1, col2)[(i + (i %/% 8)) %% 2 + 1])
        })
}

checkers("black", "white")
```

```{r}
library(here)
library(waffle)
library(patchwork)
library(magick)
library(tidyverse)

# Vector
x <- c(A= 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1)
y <- c(A= 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1)

# Create checker boxes
w1 = waffle(x, rows = 8, flip = TRUE, colors = c("black", "white", "black", "white", "black", "white", "black", "white"), legend_pos = "", , size = 0.1) + 
  theme(plot.margin = margin(0, 0, 0, 0))
w2 = waffle(y, rows = 8, flip = TRUE, colors = c("white", "black", "white", "black", "white", "black", "white", "black"), legend_pos = "", size = 0.1) +
  theme(plot.margin = margin(0, 0, 0, 0))

# Make checker board
checkerboard <- w1 / w2 / w1 / w2 / w1 / w2 / w1 / w2
checkerboard
#ggsave("checkerboard.png", width = 7, height = 7)

```

### Complement an image

In the complement of a binary image, zeros become ones and ones become zeros.
Black and white are reversed.

```{r}
library(magick)
img <- image_read("checkerboard.png") %>% 
  image_convert(type = "grayscale")
dim_x = 160 * 4
dim_y = 160 * 4
img <- image_resize(img, paste(dim_x, dim_y, sep = "x"))



row_names = tibble(x = 1:dim_x, y = rep(LETTERS[1:8], each = dim_y/8), z = paste(x, "_", y, sep = "")) %>% pull(z)

col_names = tibble(x = 1:dim_x, y = rep(1:8, each = dim_x/8), z = paste(x, "_", y, sep = "")) %>% pull(z)
```

```{r}
# Create array and number rows and columns
img_array <- drop(as.integer(pluck(img, 1)))
# rownames(img_array) <- 1:nrow(img_array)
# colnames(img_array) <- 1:ncol(img_array)
rownames(img_array) <- row_names
colnames(img_array) <- col_names


# Create data frame from array and rename column
img_df <- img_array %>% 
  as_tibble() %>% 
  mutate(y = row_names) %>% 
  #rowid_to_column(var = "y") %>% 
  pivot_longer(!y, names_to = "x", values_to = "pv") %>% 
  mutate(pv = scales::rescale(pv, to = c(0, 1))) %>% 
  # binarize
  mutate(pv = case_when(
    pv > 0.5 ~ 1,
    TRUE ~ 0))


img_dfx = img_df %>% 
       separate(y, c("y", "pl")) %>% 
       separate(x, c("x", "pn")) %>% 
       mutate(pos = paste(pl, pn, sep = "")) %>% 
       select(-c(pn, pl)) %>% 
  mutate(across(c(y, x, pv), as.numeric)) %>% 
  group_by(pos) %>% 
  mutate(centroidx = round(mean(x)), centroidy = round(mean(y))) %>% 
  ungroup()


# theme_set(theme_void())
# img_dfx %>%
#   #filter(str_detect(pos, "A|B")) %>%
#   ggplot() +
#   geom_point(aes(x = x, y = y, color = pv), show.legend = F) +
#   geom_point(aes(x = centroidx, y = centroidy), color = "white", size = 2) +
#   geom_text(aes(x = centroidx, y = centroidy + 2, label = paste(centroidx, centroidy, sep = ",")), color = "green", size = 2.5) +
#   scale_color_gradientn(colors = c("black", "white")) +
#   coord_equal()

#ggsave("checkfill.png", width = 7, height = 7)
```

```{r}
centroids <- img_dfx %>% 
  ungroup() %>% 
  distinct(pos, centroidx, centroidy)



# z=get_centroid(position = "A2")
# z
```

### Mapping coordinates to xy

Once the centroid pixel coordinates were successfully extracted, the next step involved translating them to their corresponding real-world x-y coordinates in cm.
This scaling from pixel values to cm values was achieved by the mapping function :

```{r}
map_fun <- function(value, from_low, from_high, to_low, to_high){
  
  mapped_val = (value - from_low) * (to_high - to_low) / (from_high - from_low) + (to_low)
  
  return(mapped_val)
}

# Functuion to return mapped values
get_centroid <- function(position){
  x = centroids %>% 
    filter(str_detect(pos, position)) %>% 
    pull(x_mapped)
  
  y = centroids %>% 
    filter(str_detect(pos, position)) %>% 
    pull(y_mapped)
  
  return(c(x, y))
}
```

#### Sanity check

Compare MATLAB and R results

```{r}
#  A character vector with one element for each line
matlab_xy = tibble(xy = read_lines("matlab_xy.txt") %>% 
                     str_remove_all("\\[|\\]")) %>% 
  separate(xy, c("Mx", "My"), sep = ",") %>% 
  mutate(across(everything(), function(x) {as.double(x) %>% round()})) %>% 
  mutate(bp = read_lines("matlab_pos.txt") %>% 
           str_remove_all("'")) %>% 
  left_join(centroids %>% 
              select(pos, Rx = x_mapped, Ry = y_mapped),
                     by = c("bp" = "pos"), keep = TRUE)
```

### Trial and error

```{r}
centroids = centroids %>% 
  mutate(x_mapped = map_fun(centroidx, from_low = 0, from_high = dim_x, to_low = 9, to_high = -9),
         y_mapped = map_fun(centroidy, from_low = 0, from_high = 192, to_low = 11, to_high = 17)) %>% 
  mutate(across(where(is.numeric), round)) %>% 
  # Rearrange board positions to match our physical chess board
  mutate(
    pl = rep(LETTERS[1:8], times = nrow(centroids)/8),
    pn = rep(1:8, each = nrow(centroids)/8),
    pos = paste(pl, pn, sep = "")) %>% 
  select(-c(pl, pn))
```

```{r}
initial_pos <- "C1"
final_pos <- "B1"
xy_initial <- get_centroid(position = initial_pos)
xy_final <- get_centroid(position = final_pos)
```

### Inverse kinematics

```{r}
ikin <- function(xyz_coordinates){
  
  # Extract xyz coordinates
  x = xyz_coordinates[1]
  y = xyz_coordinates[2]
  z = xyz_coordinates[3]
  
  # Account for manipulator moving right or left
  if (x >= 0){
    theta1 = atan(x/y) + pi/2
  } else {
    theta1 = atan(y/x) %>% abs()
  }
  
  # Calculate theta 3 since its needed in theta 2
  theta3 = acos((x^2 + y^2 + (z-5)^2 - 8^2 - 12^2) / (2*8*12))
  # 8 and 12 are the dimensions of manipulator arms
  
  
  # Calculate theta 2
  theta2 = atan((5.5 - z) / (sqrt(x^2 + y^2)) ) + atan((12 * sin(theta3)) / (8 + 12*cos(theta3)))
  
  if(theta2 > 0){
    theta2 = pi - abs(theta2)
  }
  
  # tbl <- tibble(
  #   ef_position = c(x, y, z),
  #   motor_angles = (c(theta1, theta2, pi-theta3)*180/pi) %>% round()
  # )
  
  
  
  #return(tbl)
  
  motor_angles = (c(theta1, theta2, pi-theta3)*180/pi) %>% round()
  return(motor_angles)
  
}
```

```{r}
# Initial and final angles
z = 3.5
xyz_initial <-  c(xy_initial, z)
xyz_final <-  c(xy_final, z)

initial_angles <-  ikin(xyz_coordinates = xyz_initial) %>% 
  pull(motor_angles)

final_angles <- ikin(xyz_coordinates = xyz_final) %>% 
   pull(motor_angles)

```

### Trajectory

```{r}

# Tracing a trajectory can help achieve a smoother motion
library(matlib)


# Velocity and acceleration constraints
v_init = 0
v_fin = 0
acc_init = 0
acc_fin = 0

#We desire our motion to be executed in a span of two seconds
t0 = 0
tfin= 2

#finding the coefficients a0 - a5 using velocity and acceleration constraints set above
t_elements = c(1, t0, t0^2, t0^3, t0^4, t0^5,
               0, 1, 2*t0, 3*t0^2, 4*t0^3, 5*t0^4,
               0, 0, 2, 6*t0, 12*t0^2, 20*t0^3,
               1, tfin, tfin^2, tfin^3, tfin^4, tfin^5,
               0, 1, 2*tfin, 3*tfin^2, 4*tfin^3, 5*tfin^4,
               0, 0, 2, 6*tfin, 12*tfin^2, 20*tfin^3
)



# Ian: How do we modify this for multiple values?
#Values chose arbitrary (play with the input values and check the effect on the output)



init_theta = 65 
fin_theta =  135

gen_traj <- function(init_theta, fin_theta){
  

t_mtx = matrix(t_elements, nrow = 6, ncol = 6, byrow = TRUE)
const_mtx_elmnts = c(init_theta, v_init, acc_init, fin_theta, v_fin, acc_fin) #constraints matrix
const_mtx = matrix(const_mtx_elmnts,nrow = 6, ncol = 1, byrow = TRUE)
a_mtx = inv(t_mtx) %*% const_mtx
a_mtx = as.data.frame(a_mtx)

#Substituting coefficient values into the quintic polynomial 
#defining matrix time interval
t = c(seq(from = 0, to = 2, by = 0.05))
time <- matrix(t,nrow = 41, ncol = 1, byrow = TRUE )
traj <- vector("numeric", 41)
x = 1
for(x in 1:length(t)){
  t = time[x,1]
  
  q_poly = a_mtx[1,1] + a_mtx[2,1]*t + a_mtx[3,1]*t^2 + a_mtx[4,1]*t^3 + a_mtx[5,1]*t^4 + a_mtx[6,1]*t^5 #equation 7 with coefficients substituted
  
  x =x+1
  
  traj[x] <- q_poly
}

traj = round(traj)
traj <- traj[2:length(traj)]
df_traj = tibble(traj)
return(df_traj)
#return(traj)

}


cv=gen_traj(init_theta = 65, fin_theta = 135)
```

```{r}
df_traj <- tibble(
  m1_angles = gen_traj(init_theta = initial_angles[1],
                       fin_theta = final_angles[1]) %>% 
    paste("A", sep = ""),
  
  m2_angles = gen_traj(init_theta = initial_angles[2],
                       fin_theta = final_angles[2]) %>% 
    paste("B", sep = ""),
  
  m3_angles = gen_traj(init_theta = initial_angles[3],
                       fin_theta = final_angles[3]) %>% 
    paste("C", sep = "")
) %>%
  mutate(n = row_number()) %>% 
  
  group_by(n) %>% 
  mutate(
    str_angles = str_c(m1_angles, m2_angles, m3_angles, collapse = "")
      ) %>% 
  ungroup()
```

### R2Arduino

```{r}
library(serial)

# See the ports available
# listPorts()

# Create an Arduino object and set up the interface parameters.
arduino = serialConnection(name = "test1",
                           port = "COM5",
                           mode = "9600,n,8,1" ,
                           buffering = "none",
                           newline = TRUE,
                           eof = "",
                           translation = "cr",
                           handshake = "none",
                           buffersize = 8096)

# Initialize the interface
#close(arduino)
open(arduino)
Sys.sleep(2)


for (r in 1:nrow(df_traj)){
  
  angles = df_traj %>% 
    slice(n = r) %>% 
    pull(str_angles)
  
  #close(arduino)
  #open(arduino)
  #Sys.sleep(3)
  #Sys.sleep(0.3)
  write.serialConnection(arduino, angles)
  Sys.sleep(0.4)
  # data=capture.output(cat(read.serialConnection(arduino,n=0)))
  # df = tibble(rbind(df,data))
  
  #Sys.sleep(0.5)
}
Sys.sleep(3)


# read the values sent to the serial port connection by 
# Arduino script 
data_frm_arduino <- tibble(from_arduino = capture.output(cat(read.serialConnection(arduino)))) %>% 
  filter(if_any(where(is.character), ~ .x != "")) %>% 
  mutate(from_arduino = as.integer(from_arduino))


data_frm_arduino
```

```{r}

clear_serial <- function(arduino){
  #arduino = arduino
  close(arduino)
  rm(arduino)}

close(arduino)
rm(arduino)
```

### Capture logic

`C1` and `B2` `Capture` :

-   manipulator goes to `B2` then to `OUT` %\>%

-   manipulator goes to `C1` then to `B2`

```{r}
## Too much writing of code ##

input <- "C1 and B2 Capture"

# Remove "and"
input <- input %>% 
  str_remove("and") %>% 
  str_split(pattern = " ") %>% 
  unlist() %>% 
  str_subset(".")

if (str_detect(paste(input, collapse = " "), "Capture") && str_which(input, "Capture") == 3){
  
  # XYz Coordinates
  start_point = c(get_centroid(position = input[2]), 3.5)
  OUT = c(13, 11.25, 3.5)
  end_point = c(get_centroid(position = input[1]), 3.5)
  
  # Motor angles
  start_angles <-  ikin(xyz_coordinates = start_point) %>% 
  pull(motor_angles)
  OUT_angles <- ikin(xyz_coordinates = OUT) %>% 
  pull(motor_angles)
  end_angles <- ikin(xyz_coordinates = end_point) %>% 
  pull(motor_angles)
  
  # Trajectory
  df_traj <- tibble(
    m1_angles_init = gen_traj(init_theta = start_angles[1],
                         fin_theta = OUT_angles[1]) %>% 
      paste("A", sep = ""),
    
    m1_angles_fin = gen_traj(init_theta = end_angles[1],
                         fin_theta = start_angles[1]) %>% 
      paste("A", sep = ""),
    
    
    
    m2_angles_init = gen_traj(init_theta = start_angles[2],
                         fin_theta = OUT_angles[2]) %>% 
      paste("B", sep = ""), 
    
    m2_angles_fin = gen_traj(init_theta = end_angles[2],
                         fin_theta = start_angles[2]) %>% 
      paste("B", sep = ""),
    
    
    m3_angles_init = gen_traj(init_theta = start_angles[3],
                         fin_theta = OUT_angles[3]) %>% 
      paste("C", sep = ""),
      
      
      m3_angles_fin = gen_traj(init_theta = end_angles[3],
                         fin_theta = start_angles[3]) %>% 
      paste("C", sep = "")) %>% 
    
      mutate(str_angles_init = str_c(m1_angles_init, m2_angles_init, m3_angles_init, sep = ""),
             
             str_angles_fin = str_c(m1_angles_fin, m2_angles_fin, m3_angles_fin, sep = ""))
}


# TBC
```

```{r}
# # Reduce writing code?
# xg_traj <- function(init_theta, fin_theta){
#   traj = gen_traj(init_theta, fin_theta)
#   df_traj = tibble(traj)
#   return(df_traj)
# }
# 
# map2_dfc(start_angles, OUT_angles, xg_traj)
# pmap_dfc(list(as.list(start_angles), as.list(OUT_angles)), xg_traj)
```

```{r}
# # Started from the bottom
# 
# input <- "C1 and B2 Capture"
# 
# # Remove "and"
# input <- input %>% 
#   str_remove("and") %>% 
#   str_split(pattern = " ") %>% 
#   unlist() %>% 
#   str_subset(".")
# 
# if (str_detect(paste(input, collapse = " "), "Capture") && str_which(input, "Capture") == 3){
#   
#   # XYZ positions
#   start_point = c(get_centroid(position = input[1]), 3.5)
#   #OUT = c(13, 11.25, 3.5)
#   end_point = c(get_centroid(position = input[2]), 3.5)
#   
#   
#   # Define trajectory path
#   start_angles <-  ikin(xyz_coordinates = c(get_centroid(position = input[1]), 3.5)) %>% 
#   pull(motor_angles)
#   # OUT_angles <- ikin(xyz_coordinates = OUT) %>% 
#   # pull(motor_angles)
#   end_angles <- ikin(xyz_coordinates = c(get_centroid(position = input[2]), 3.5)) %>% 
#   pull(motor_angles)
#   rest = c(90, 90, 90)
#   
#   # Trajectory
#   # rest %>% sa %>% rest %>% ea %>% rest
#   path = list(rest, start_angles, rest, end_angles, rest)
#   for (i in 1:length(path)) {
#     map2_dfc(path %>% pluck(i), path %>% pluck(i+1), xg_traj) %>% 
#       `colnames<-`(LETTERS[1:ncol(.)]) %>% 
#       mutate(across(everything(), ~ paste(.x, cur_column(), sep = ""))) %>% 
#       rowwise() %>% 
#       mutate(traj = paste(cur_data(), collapse = "")) %>% 
#       ungroup() %>% distinct(traj) %>% pull(traj)
#     
#   }
# }
```

```{r}
# map(1:4, ~ map2_dfc(path %>% pluck(.x), path %>% pluck(.x+1), xg_traj) %>% 
#       `colnames<-`(LETTERS[1:ncol(.)]) %>% 
#       mutate(across(everything(), ~ paste(.x, cur_column(), sep = ""))) %>% 
#       rowwise() %>% 
#       mutate(traj = paste(cur_data(), collapse = "")) %>% 
#       ungroup() %>% distinct(traj) %>% pull(traj)) 

join_traj <- function(path_start, path_end){
  # Calculate trajectory
  traj_str = suppressMessages(map2_dfc(path_start, path_end, xg_traj)) %>% 
    `colnames<-`(LETTERS[1:ncol(.)]) %>% 
    mutate(across(everything(), ~ paste(.x, cur_column(), sep = ""))) %>% 
    rowwise() %>% 
    mutate(traj = paste(cur_data(), collapse = "")) %>% 
    ungroup() %>% 
    distinct(traj) %>% 
    pull(traj)
  
  return(traj_str)
}

```

```{r}
input <- "C1 and B2"

# Remove "and"
input <- input %>% 
  str_remove("and") %>% 
  str_split(pattern = " ") %>% 
  unlist() %>% 
  str_subset(".")

OUT = c(13, 11.25, 3.5)


if (str_detect(paste(input, collapse = " "), "Capture") && str_which(input, "Capture") == 3){
  # Trajectory angles
  start_angles <-  ikin(xyz_coordinates = c(get_centroid(position = input[1]), 3.5))
  end_angles <- ikin(xyz_coordinates = c(get_centroid(position = input[2]), 3.5)) 
  OUT_angles <- ikin(xyz_coordinates = OUT)
  rest = c(90, 90, 90)
  
  # Trajectory
  # rest %>% ea %>% out %>% rest %>% sa %>% rest %>% ea %>% rest
  path = list(rest, end_angles, OUT_angles, rest, start_angles, rest, end_angles, rest)
  path_traj = map(seq_len(length(path)-1), ~ join_traj(path %>% pluck(.x), path %>% pluck(.x+1)))
  

} else {
  # Trajectory angles
  start_angles <-  ikin(xyz_coordinates = c(get_centroid(position = input[1]), 3.5)) 
  end_angles <- ikin(xyz_coordinates = c(get_centroid(position = input[2]), 3.5)) 
  rest = c(90, 90, 90)
  
  # Trajectory
  # rest %>% sa %>% rest %>% ea %>% rest
  path = list(rest, start_angles, rest, end_angles, rest)
  path_traj = map(seq_len(length(path)-1), ~ join_traj(path %>% pluck(.x), path %>% pluck(.x+1)))
}
```

#### To Arduino

```{r}
library(serial)

# See the ports available
# listPorts()

# Create an Arduino object and set up the interface parameters.
arduino = serialConnection(name = "test1",
                           port = "COM5",
                           mode = "9600,n,8,1" ,
                           buffering = "none",
                           newline = TRUE,
                           eof = "",
                           translation = "cr",
                           handshake = "none",
                           buffersize = 8096)

# Initialize the interface
#close(arduino)
open(arduino)
Sys.sleep(2)


for (angles in  (path_traj[[1]])){
  
  # angles = df_traj %>% 
  #   slice(n = r) %>% 
  #   pull(str_angles)
  
  #close(arduino)
  #open(arduino)
  #Sys.sleep(3)
  #Sys.sleep(0.3)
  write.serialConnection(arduino, angles)
  Sys.sleep(0.4)
  # data=capture.output(cat(read.serialConnection(arduino,n=0)))
  # df = tibble(rbind(df,data))
  
  #Sys.sleep(0.5)
}
Sys.sleep(3)


# read the values sent to the serial port connection by 
# Arduino script 
data_frm_arduino <- tibble(from_arduino = capture.output(cat(read.serialConnection(arduino)))) %>% 
  filter(if_any(where(is.character), ~ .x != "")) %>% 
  mutate(from_arduino = as.integer(from_arduino))


data_frm_arduino
```

```{r}
 write.serialConnection(arduino, "75C")
```

```{r}
clear = function(){
  arduino <<- arduino
  close(arduino)
  open(arduino)
}
clear()
```

```{r}

walk(1:, ~ walk(path_traj[[.x]], ~ write_angles(.x)))
write_angles = function(angles){
  write.serialConnection(arduino, angles)
  Sys.sleep(0.4)
}

walk(path_traj[[1]], ~ write_angles(.x))
clear()
for (angles in  (path_traj[[1]])){
  
  # angles = df_traj %>% 
  #   slice(n = r) %>% 
  #   pull(str_angles)
  
  #close(arduino)
  #open(arduino)
  #Sys.sleep(3)
  #Sys.sleep(0.3)
  write.serialConnection(arduino, angles)
  Sys.sleep(0.4)
  # data=capture.output(cat(read.serialConnection(arduino,n=0)))
  # df = tibble(rbind(df,data))
  
  #Sys.sleep(0.5)
}
Sys.sleep(3)
```

### To do

-work on not returning to rest position often
